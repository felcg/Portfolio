{"version":3,"sources":["fontawesome.js","components/FrontPage/Project.js","components/FrontPage/Projects.js","components/FrontPage/index.js","components/Query/index.js","queries/post.js","components/Posts/Post.js","components/Posts/PostContainer.js","queries/posts.js","components/Posts/Posts.js","components/Contato/Contato.js","components/Router.js","components/Navbar.js","components/App.js","components/ErrorBoundary.js","utils/apolloClient.js","index.js"],"names":["library","add","fab","fas","Project","Text","Github","Demo","Image","Card","className","Img","src","href","icon","Projects","Container","Index","fluid","Query","children","query","id","useQuery","variables","data","loading","error","JSON","stringify","POST_QUERY","gql","Post","useParams","post","Title","source","Content","locale","format","Published_at","PostContainer","PublishedAt","Id","to","POSTS_QUERY","Posts","posts","map","key","ContactForm","useState","setState","Form","action","method","onSubmit","ev","preventDefault","form","target","FormData","xhr","XMLHttpRequest","open","setRequestHeader","onreadystatechange","readyState","DONE","status","reset","send","Group","controlId","Control","type","placeholder","name","exact","path","component","FrontPage","Contato","NavBar","route","useLocation","pathname","Navbar","fixed","expand","size","includes","Router","ErrorBoundary","props","state","hasError","this","Component","cache","InMemoryCache","link","HttpLink","uri","process","client","ApolloClient","render","basename","App","document","getElementById"],"mappings":"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","file":"static/js/main.a0ed9e65.chunk.js","sourcesContent":["import { library } from '@fortawesome/fontawesome-svg-core'\nimport { fab } from '@fortawesome/free-brands-svg-icons'\nimport { fas } from '@fortawesome/free-solid-svg-icons'\n\nlibrary.add(fab, fas)\n\n\n// yarn add @fortawesome/fontawesome-svg-core @fortawesome/free-solid-svg-icons\n// @fortawesome/react-fontawesome @fortawesome/free-brands-svg-icons\n// @fortawesome/free-regular-svg-icons\n","import React from 'react'\nimport { Card } from 'react-bootstrap'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\nconst Project = ({\n  Text, Github, Demo, Image,\n}) => (\n  <Card className=\"project-card\">\n    <Card.Img src={Image} className=\"project-img\" />\n    <div className=\"card-link-div p-3\">\n      <a href={Github}>\n        <FontAwesomeIcon icon={['fab', 'github']} className=\"icons-img\" />\n        Github\n      </a>\n      <a href={Demo}>\n        <FontAwesomeIcon icon={['fas', 'external-link-alt']} className=\"icons-img\" />Demonstração\n      </a>\n    </div>\n    <Card.Text className=\"text-white font-weight-light\">\n      <span className=\"text-secondary\">Tecnologias: </span>{Text}\n    </Card.Text>\n  </Card>\n)\n\nexport default Project\n","import React from 'react'\nimport { Container } from 'react-bootstrap'\nimport Project from './Project'\n\nconst Projects = () => (\n  <Container className=\"projects-container\">\n    <h1>Projetos</h1>\n    <Project Text=\"React, Sass, Bootstrap, React-Bootstrap, GraphQL, Strapi\" Github=\"https://github.com/felcg/Portfolio\" Demo=\"https://felcg.github.io/Portfolio/\" Image=\"https://res.cloudinary.com/dj641se4s/image/upload/c_scale,w_600/v1591473455/Portfolio.png\" />\n    <Project Text=\"React, Sass, Bootstrap, React-Bootstrap\" Github=\"https://github.com/felcg/BootstrapLandingPage\" Demo=\"https://felcg.github.io/BootstrapLandingPage/\" Image=\"https://res.cloudinary.com/dj641se4s/image/upload/w_600/q_100/v1591298728/project1.png\" />\n    <Project Text=\"React, Sass, Bootstrap, React-Bootstrap\" Github=\"https://github.com/felcg/BootstrapLandingPage2\" Demo=\"https://felcg.github.io/BootstrapLandingPage2/\" Image=\"https://res.cloudinary.com/dj641se4s/image/upload/w_600/q_auto/v1591298343/project2.png\" />\n  </Container>\n)\n\nexport default Projects\n","import React from 'react'\nimport { Container } from 'react-bootstrap'\nimport Projects from './Projects'\n\nconst Index = () => (\n  <Container fluid className=\"bg-dark sections-container\">\n    <Projects />\n  </Container>\n)\n\nexport default Index\n","import React from 'react'\nimport { useQuery } from '@apollo/react-hooks'\n\nconst Query = ({ children, query, id }) => {\n  const { data, loading, error } = useQuery(query, {\n    variables: { id },\n  })\n\n  if (loading) return <p>Loading...</p>\n  if (error) return <p>Error: {JSON.stringify(error)}</p>\n  return children({ data })\n}\n\nexport default Query\n","import gql from 'graphql-tag'\n\nconst POST_QUERY = gql`\n  query Posts($id: ID!) {\n    post(id: $id) {\n      id\n      Title\n      Content\n      Published_at\n    }\n  }\n`\n\nexport default POST_QUERY\n","import React from 'react'\nimport { Container } from 'react-bootstrap'\nimport { useParams } from 'react-router'\nimport ReactMarkdown from 'react-markdown'\nimport Moment from 'react-moment'\nimport Query from '../Query'\nimport 'moment/locale/pt-br'\n\nimport POST_QUERY from '../../queries/post'\n\nconst Post = () => {\n  const { id } = useParams()\n  return (\n    <Container fluid className=\"bg-dark sections-container\">\n      <Query query={POST_QUERY} id={id}>\n        {({ data: { post } }) => (\n          <div className=\"post-container\">\n            <div className=\"post-title\">\n              <h1>{post.Title}</h1>\n            </div>\n            <ReactMarkdown source={post.Content} className=\"text-light\" />\n            <p>\n              <Moment locale=\"pt-br\" format=\"DD MMMM YYYY\">{post.Published_at}</Moment>\n            </p>\n          </div>\n        )}\n      </Query>\n    </Container>\n  )\n}\n\nexport default Post\n","import React from 'react'\nimport { Card } from 'react-bootstrap'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { Link } from 'react-router-dom'\nimport Moment from 'react-moment'\nimport 'moment/locale/pt-br'\n\nconst PostContainer = ({\n  Title, PublishedAt, Id,\n}) => (\n  <Card className=\"project-card\">\n    <div className=\"card-link-div p-3\">\n      <Link to={`/posts/${Id}`} className=\"blog-title-list\">\n        <FontAwesomeIcon icon={['fas', 'feather-alt']} className=\"icons-img\" />\n        {Title}\n      </Link>\n    </div>\n    <Card.Text className=\"text-secondary font-weight-light\">\n      <Moment locale=\"pt-br\" format=\"DD MMMM YYYY\">{PublishedAt}</Moment>\n    </Card.Text>\n  </Card>\n)\n\nexport default PostContainer\n","/* eslint-disable import/no-extraneous-dependencies */\nimport gql from 'graphql-tag'\n\nconst POSTS_QUERY = gql`\n  query allPosts {\n    posts {\n      id\n      Title\n      Content\n      Published_at\n    }\n  }\n`\n\nexport default POSTS_QUERY\n","import React from 'react'\nimport { Container } from 'react-bootstrap'\n\nimport PostContainer from './PostContainer'\nimport Query from '../Query/index'\nimport POSTS_QUERY from '../../queries/posts'\n\nconst Posts = () => (\n  <Container fluid className=\"bg-dark sections-container posts-container\">\n\n    <Query query={POSTS_QUERY} id={null}>\n      {({ data: { posts } }) => (\n        <Container>\n          <h1>Posts</h1>\n          {posts.map((post) => (\n            <PostContainer\n              Title={post.Title}\n              PublishedAt={post.Published_at}\n              Id={post.id}\n              key={post.id}\n            />\n          ))}\n        </Container>\n      )}\n    </Query>\n  </Container>\n)\n\nexport default Posts\n","/* eslint-disable no-unused-vars */\nimport React, { useState } from 'react'\nimport { Container, Form } from 'react-bootstrap'\n\nconst ContactForm = () => {\n  const [state, setState] = useState('')\n\n  const submitForm = (ev) => {\n    ev.preventDefault()\n    const form = ev.target\n    const data = new FormData(form)\n    const xhr = new XMLHttpRequest()\n    xhr.open(form.method, form.action)\n    xhr.setRequestHeader('Accept', 'application/json')\n    xhr.onreadystatechange = () => {\n      if (xhr.readyState !== XMLHttpRequest.DONE) return\n      if (xhr.status === 200) {\n        form.reset()\n        setState('SUCCESS')\n      } else {\n        setState('ERROR')\n      }\n    }\n    xhr.send(data)\n  }\n\n  return (\n    <Container fluid className=\"bg-dark sections-container contact-container\">\n      <Container className=\"contact-form\">\n        <h1>Contato</h1>\n        <Form action=\"https://formspree.io/meqrgnnw\" method=\"POST\" onSubmit={submitForm}>\n          <Form.Group controlId=\"formEmail\">\n            <Form.Control type=\"text\" placeholder=\"Seu email\" name=\"_replyto\" className=\"contact-input\" />\n          </Form.Group>\n\n          <Form.Group controlId=\"formName\">\n            <Form.Control type=\"text\" placeholder=\"Seu nome\" name=\"name\" className=\"contact-input\" />\n          </Form.Group>\n\n          <Form.Group controlId=\"formMessage\">\n            <Form.Control type=\"text\" placeholder=\"Sua mensagem\" name=\"message\" className=\"contact-input\" />\n          </Form.Group>\n          <button type=\"submit\" className=\"contact-button\">\n            Enviar\n          </button>\n        </Form>\n      </Container>\n    </Container>\n  )\n}\n\nexport default ContactForm\n","import React from 'react'\nimport { Route, Switch } from 'react-router-dom'\n\nimport FrontPage from './FrontPage'\nimport Post from './Posts/Post'\nimport Posts from './Posts/Posts'\nimport Contato from './Contato/Contato'\n\nexport default () => (\n  <Switch>\n    <Route exact path=\"/\" component={FrontPage} />\n    <Route exact path=\"/contato\" component={Contato} />\n    <Route exact path=\"/posts/\" component={Posts} />\n    <Route exact path=\"/posts/:id\" component={Post} />\n  </Switch>\n\n)\n","import React from 'react'\nimport { Link, useLocation } from 'react-router-dom'\nimport { Navbar } from 'react-bootstrap'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\nconst NavBar = () => {\n  const location = useLocation()\n  const route = location.pathname\n\n  return (\n\n    <Navbar fixed=\"top\" expand=\"lg\" className=\"bg-dark sidenav\">\n      <div className=\"text-welcome\">\n        <h1 className=\"font-weight-bold text-primary\">Felipe CG</h1>\n        <p className=\"text-light\">Olá, sou um desenvolvedor web com foco em Javascript.\n          Tenho prática com React, Node.js e GraphQL. Além disso também tenho experiência com\n          bancos de dados MongoDB e PostgreSQL.\n        </p>\n      </div>\n      <div className=\"icons-div\">\n        <a href=\"https://github.com/felcg\" className=\"icons-link\">\n          <FontAwesomeIcon icon={['fab', 'github']} size=\"2x\" className=\"icons-img\" />\n\n          GitHub\n        </a>\n        <a href=\"https://www.linkedin.com/in/xfelipecg/\" className=\"icons-link\">\n          <FontAwesomeIcon icon={['fab', 'linkedin']} size=\"2x\" className=\"icons-img\" />\n          Linkedin\n        </a>\n      </div>\n\n      <div className=\"buttons-container\">\n        <Link to=\"/\">\n          {route === '/' ? <div className=\"dot-full\" /> : <div className=\"dot-empty\" />}\n          <p>Projetos</p>\n        </Link>\n        <div className=\"line2\" />\n        <Link to=\"/posts\">\n          {route.includes('/posts') ? <div className=\"dot-full\" /> : <div className=\"dot-empty\" />}\n          <p>Blog</p>\n        </Link>\n        <div className=\"line2\" />\n        <Link to=\"/contato\">\n          {route === '/contato' ? <div className=\"dot-full\" /> : <div className=\"dot-empty\" />}\n          <p>Contato</p>\n        </Link>\n\n      </div>\n\n    </Navbar>\n  )\n}\n\nexport default NavBar\n","import React from 'react'\nimport Router from './Router'\nimport Navbar from './Navbar'\nimport '../assets/custom.scss'\n\nexport default () => (\n  <>\n    <Navbar />\n    <Router />\n  </>\n)\n","import React, { Component } from 'react'\n\nclass ErrorBoundary extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      hasError: false,\n    }\n  }\n\n  static getDerivedStateFromError() {\n    return { hasError: true }\n  }\n\n  componentDidCatch() {\n    this.setState({ hasError: true })\n  }\n\n  render() {\n    const { hasError } = this.state\n    const { children } = this.props\n    if (!hasError) {\n      return children\n    }\n    return <p> An error occurred! </p>\n  }\n}\n\nexport default ErrorBoundary\n","/* eslint-disable import/no-extraneous-dependencies */\nimport { ApolloClient } from 'apollo-client'\nimport { InMemoryCache } from 'apollo-cache-inmemory'\nimport { HttpLink } from 'apollo-link-http'\n\nconst cache = new InMemoryCache()\nconst link = new HttpLink({\n  uri: `${process.env.REACT_APP_BACKEND_URL}/graphql`,\n})\nconst client = new ApolloClient({\n  cache,\n  link,\n})\n\nexport default client\n","import React from 'react'\nimport { render } from 'react-dom'\nimport { BrowserRouter } from 'react-router-dom'\nimport { ApolloProvider } from 'react-apollo'\n\n\nimport './assets/custom.scss'\nimport './fontawesome'\nimport App from './components/App'\nimport ErrorBoundary from './components/ErrorBoundary'\nimport client from './utils/apolloClient'\n\n\nconst refresh = () => render(\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <ApolloProvider client={client}>\n      <ErrorBoundary>\n        <App />\n      </ErrorBoundary>\n    </ApolloProvider>\n  </BrowserRouter>,\n  document.getElementById('root'),\n)\n\nrefresh()\n"],"sourceRoot":""}